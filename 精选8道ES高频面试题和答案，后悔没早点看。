> 不要再干巴巴的背诵八股文了，一定要结合具体场景回答面试问题！

## 前言

**我们在回答面试题的时候，不能干巴巴的去背八股文，一定要结合应用场景，最好能结合过去做过的项目，去和面试官沟通。**

这些场景题虽然不要求我们手撕代码，但是解决思路和关键方法还是要烂熟于心的。

**这篇文章不仅给出了常见的面试题和答案，并且给出了这些知识点的应用场景、也给出了解决这些问题的思路，并且结合这些思路提供了关键代码。这些代码段都是可以直接CV到本地运行起来的，并且都写清楚了注释，欢迎大家动起手来操练起来，不要死记硬背八股文。**

## 1.模糊搜索

> 如何在Elasticsearch中执行模糊搜索（Fuzzy Search）？

### 解答：
在Elasticsearch中，可以使用模糊搜索（Fuzzy Search）来查找与给定术语相似的文档。模糊搜索是一种基于编辑距离的近似匹配方法，可以处理拼写错误或相似词的情况。

在一个电商平台的商业项目中，可以使用模糊搜索来改善商品搜索功能。例如，当用户输入一个关键词时，可以使用模糊搜索来查找与该关键词相似的商品，以提供更全面的搜索结果。

### 代码示例：

下面是一个简单的代码示例，演示如何在Elasticsearch中执行模糊搜索：

```go
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
	"log"
)

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 构建模糊搜索请求
	var (
		buf    bytes.Buffer
		res    *esapi.Response
		search = map[string]interface{}{
			"query": map[string]interface{}{
				"fuzzy": map[string]interface{}{
					"title": map[string]interface{}{
						"value":     "iphone",
						"fuzziness": "AUTO",
					},
				},
			},
		}
	)

	// 将搜索请求转换为JSON格式
	err = json.NewEncoder(&buf).Encode(search)
	if err != nil {
		log.Fatalf("Error encoding the search query: %s", err)
	}

	// 发送模糊搜索请求
	res, err = client.Search(
		client.Search.WithContext(context.Background()),
		client.Search.WithIndex("products"),
		client.Search.WithBody(&buf),
		client.Search.WithTrackTotalHits(true),
		client.Search.WithPretty(),
	)
	if err != nil {
		log.Fatalf("Error sending the search request: %s", err)
	}
	defer res.Body.Close()

	// 解析搜索结果
	var result map[string]interface{}
	if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
		log.Fatalf("Error parsing the search response: %s", err)
	}

	// 处理搜索结果
	// ...

	fmt.Println(result)
}
```

通过上述代码示例，我们可以看到如何使用Elasticsearch客户端构建模糊搜索请求，并处理返回的搜索结果。

这个例子展示了如何在商业项目中使用模糊搜索来改善商品搜索功能，提供更全面的搜索体验。

## 2.倒排索引

> 什么是倒排索引？它在Elasticsearch中的作用是什么？ 

### 解答：

倒排索引是一种数据结构，用于加速文本搜索。它将每个文档中的每个词映射到包含该词的文档列表中。

在商业项目中，例如新闻发布平台，Elasticsearch的倒排索引可以将每个关键词映射到包含该关键词的新闻文章列表中，以实现快速的关键词搜索。

### 举个栗子：

以下是一个基于Go语言的简单倒排索引示例代码：

```go
package main

import (
	"fmt"
	"strings"
)

type InvertedIndex map[string][]int

func BuildInvertedIndex(docs []string) InvertedIndex {
	index := make(InvertedIndex)

	for docID, doc := range docs {
		words := strings.Fields(doc)
		for _, word := range words {
			word = strings.ToLower(word)
			if _, ok := index[word]; !ok {
				index[word] = []int{}
			}
			index[word] = append(index[word], docID)
		}
	}

	return index
}

func main() {
	docs := []string{
		"Hello world",
		"Hello Go",
		"Go programming language",
		"World of Go",
	}

	index := BuildInvertedIndex(docs)

	// 搜索示例
	query := "Go"
	query = strings.ToLower(query)
	if postings, ok := index[query]; ok {
		fmt.Printf("Documents containing '%s':\n", query)
		for _, docID := range postings {
			fmt.Println(docs[docID])
		}
	} else {
		fmt.Printf("No documents containing '%s' found.\n", query)
	}
}
```

在上述代码中，我们定义了一个`InvertedIndex`类型，它是一个映射，将每个单词映射到包含该单词的文档ID列表。

`BuildInvertedIndex`函数用于构建倒排索引，它遍历每个文档，将文档中的单词添加到倒排索引中。最后，我们可以使用倒排索引进行搜索，找到包含特定单词的文档。

## 3.聚合操作

> 如何在Elasticsearch中执行复杂的聚合操作？

### 解答：

在Elasticsearch中，可以使用聚合操作对数据进行统计和分析。

例如，在一个社交媒体平台的商业项目中，可以使用Elasticsearch的聚合功能来进行用户行为分析。通过聚合操作，可以计算用户的活跃度、点赞和评论数量、用户关注的话题等。这些统计数据可以帮助平台了解用户行为模式，优化推荐算法和个性化内容展示。

### 代码示例：

以下是一个基于Go语言的复杂聚合操作示例代码，用于在社交媒体平台的商业项目中进行用户行为分析：

```go
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
	"log"
)

type UserStats struct {
	Username       string `json:"username"`
	TotalLikes     int    `json:"total_likes"`
	TotalComments  int    `json:"total_comments"`
	TotalFollowers int    `json:"total_followers"`
}

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 构建聚合操作请求
	var (
		buf    bytes.Buffer
		res    *esapi.Response
		search = map[string]interface{}{
			"size": 0,
			"aggs": map[string]interface{}{
				"user_stats": map[string]interface{}{
					"terms": map[string]interface{}{
						"field": "username.keyword",
						"size":  10,
					},
					"aggs": map[string]interface{}{
						"total_likes": map[string]interface{}{
							"sum": map[string]interface{}{
								"field": "likes",
							},
						},
						"total_comments": map[string]interface{}{
							"sum": map[string]interface{}{
								"field": "comments",
							},
						},
						"total_followers": map[string]interface{}{
							"sum": map[string]interface{}{
								"field": "followers",
							},
						},
					},
				},
			},
		}
	)

	// 将聚合操作请求转换为JSON格式
	if err := json.NewEncoder(&buf).Encode(search); err != nil {
		log.Fatalf("Error encoding the search query: %s", err)
	}

	// 发送聚合操作请求
	res, err = client.Search(
		client.Search.WithContext(context.Background()),
		client.Search.WithIndex("social_media"),
		client.Search.WithBody(&buf), client.Search.WithTrackTotalHits(true), client.Search.WithPretty())
	if err != nil {
		log.Fatalf("Error sending the search request: %s", err)
	}
	defer res.Body.Close()
	// 解析聚合操作的响应
	var result map[string]interface{}
	if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
		log.Fatalf("Error parsing the search response: %s", err)
	}

	// 处理聚合操作的结果
	aggregations := result["aggregations"].(map[string]interface{})
	userStatsBucket := aggregations["user_stats"].(map[string]interface{})["buckets"].([]interface{})

	userStats := make([]UserStats, len(userStatsBucket))
	for i, bucket := range userStatsBucket {
		b := bucket.(map[string]interface{})
		userStats[i] = UserStats{
			Username:       b["key"].(string),
			TotalLikes:     int(b["total_likes"].(map[string]interface{})["value"].(float64)),
			TotalComments:  int(b["total_comments"].(map[string]interface{})["value"].(float64)),
			TotalFollowers: int(b["total_followers"].(map[string]interface{})["value"].(float64)),
		}
	}

	// 打印用户行为统计结果
	for _, stats := range userStats {
		fmt.Printf("Username: %s\n", stats.Username)
		fmt.Printf("Total Likes: %d\n", stats.TotalLikes)
		fmt.Printf("Total Comments: %d\n", stats.TotalComments)
		fmt.Printf("Total Followers: %d\n", stats.TotalFollowers)
		fmt.Println("-----------------------")
	}
}
```

在上述代码中，我们使用Elasticsearch的聚合操作来计算用户的活跃度、点赞和评论数量以及关注者数量。通过构建聚合操作请求，并解析返回的聚合结果，我们可以获取用户行为的统计数据。

## 4.数据冗余和高可用

> 如何处理Elasticsearch中的数据冗余和高可用性？

### 解答：
在商业项目中，例如在线电商平台，可以使用Elasticsearch的数据冗余和高可用性机制来确保订单数据的安全和可靠。

通过配置适当数量的副本，可以实现数据的冗余存储和高可用性。当主分片不可用时，副本可以接管服务，确保订单数据的持续访问和处理。

### 代码示例：

```go
package main

import (
	"context"
	"fmt"
	"log"

	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
)

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 设置索引的副本数
	req := esapi.IndicesPutSettingsRequest{
		Index: []string{"orders_index"},
		Body: map[string]interface{}{
			"settings": map[string]interface{}{
				"index": map[string]interface{}{
					"number_of_replicas": 2,
				},
			},
		},
	}

	// 发送设置副本数的请求
	res, err := req.Do(context.Background(), client)
	if err != nil {
		log.Fatalf("Error setting the number of replicas: %s", err)
	}
	defer res.Body.Close()

	// 检查响应状态
	if res.IsError() {
		log.Fatalf("Error setting the number of replicas: %s", res.Status())
	}

	// 打印设置副本数成功的消息
	fmt.Println("Number of replicas set successfully for orders_index")
}
```

在上述代码中，我们使用Elasticsearch的Indices Put Settings API来设置索引的副本数。在示例中，我们将订单数据的索引名称设置为orders_index，并将副本数设置为2。这样，Elasticsearch将为该索引创建两个副本，实现数据的冗余存储和高可用性。

## 5. 性能优化

> 如何优化Elasticsearch的性能？

### 解答：

- 硬件优化：配置适当的硬件资源，如增加内存、优化磁盘I/O性能等，以提高Elasticsearch的整体性能。
- 分片和副本优化：根据数据量和查询负载的需求，调整分片和副本的数量和分布，以平衡数据分布和查询负载。
- 索引和映射优化：设计合理的索引和映射，选择合适的字段类型、分析器和分词器，以提高搜索和聚合的性能。
- 查询和过滤器优化：使用合适的查询和过滤器，避免全文搜索和聚合操作的过度使用，以提高查询性能。
- 缓存和预热优化：使用缓存机制，如Elasticsearch的请求缓存或外部缓存，缓存频繁查询的结果，以减少重复计算的开销。预热机制可以在系统启动时加载常用数据，提前准备好热门查询的结果。
- 索引生命周期管理：根据数据的使用情况，定期删除过期的数据和索引，以减少存储和查询负载。
- 监控和调优：使用Elasticsearch的监控工具和指标，监控集群的健康状态、节点的负载、响应时间和资源利用率等

### 举个例子：

```go
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
)

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 配置索引的刷新间隔
	req := esapi.IndicesPutSettingsRequest{
		Index: []string{"my_index"},
		Body: map[string]interface{}{
			"index": map[string]interface{}{
				"refresh_interval": "30s",
			},
		},
	}

	// 发送设置刷新间隔的请求
	res, err := req.Do(context.Background(), client)
	if err != nil {
		log.Fatalf("Error setting the refresh interval: %s", err)
	}
	defer res.Body.Close()

	// 检查响应状态
	if res.IsError() {
		log.Fatalf("Error setting the refresh interval: %s", res.Status())
	}

	// 打印设置刷新间隔成功的消息
	fmt.Println("Refresh interval set successfully for my_index")

	// 等待一段时间，以便索引刷新
	time.Sleep(5 * time.Second)

	// 构建搜索请求
	reqSearch := esapi.SearchRequest{
		Index: []string{"my_index"},
		Body: map[string]interface{}{
			"query": map[string]interface{}{
				"match": map[string]interface{}{
					"title": "example",
				},
			},
		},
	}

	// 发送搜索请求
	resSearch, err := reqSearch.Do(context.Background(), client)
	if err != nil {
		log.Fatalf("Error sending the search request: %s", err)
	}
	defer resSearch.Body.Close()

	// 解析搜索结果
	// ...

	fmt.Println("Search request completed successfully")
}
```
在上述代码中，我们使用Elasticsearch的Indices Put Settings API来设置索引的刷新间隔，通过设置较长的刷新间隔（例如30秒），可以减少刷新操作的频率，从而提高性能。然后，我们发送一个搜索请求来验证性能优化的效果。

## 6.数据一致性

> 如何处理Elasticsearch中的数据一致性？

### 解答：

在商业项目中，例如在线支付平台，数据一致性是至关重要的。为了处理Elasticsearch中的数据一致性，可以采取以下方法：

- 使用事务机制：在进行涉及多个文档的操作时，使用事务机制来确保数据的一致性。例如，在一个在线支付平台的商业项目中，当用户发起支付请求时，可以使用事务来同时更新订单状态和用户账户余额，以保证数据的一致性。
- 使用乐观并发控制：在并发写入场景下，使用乐观并发控制机制来处理数据一致性。例如，在一个社交媒体平台的商业项目中，当多个用户同时对同一篇文章进行点赞操作时，可以使用乐观并发控制来确保点赞数的一致性。
- 使用版本控制：在更新文档时，使用版本控制机制来处理并发写入冲突。例如，在一个博客平台的商业项目中，当多个用户同时对同一篇文章进行编辑时，可以使用版本控制来处理并发写入冲突，保证数据的一致性。
- 使用分布式锁：在分布式环境下，使用分布式锁机制来处理并发写入冲突。例如，在一个在线预订平台的商业项目中，当多个用户同时对同一份资源进行预订时，可以使用分布式锁来保证预订的一致性。

### 举个例子：

以下是一个明确的代码示例，展示如何使用Go语言和Elasticsearch的API来处理数据一致性：

```go
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
)

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 定义事务操作
	transaction := func() error {
		// 开始事务
		reqBegin := esapi.XPackSecurityAuthenticateRequest{}
		resBegin, err := reqBegin.Do(context.Background(), client)
		if err != nil {
			return fmt.Errorf("Error beginning the transaction: %s", err)
		}
		defer resBegin.Body.Close()

		// 执行事务操作
		// ...

		// 提交事务
		reqCommit := esapi.XPackSecurityInvalidateTokenRequest{}
		resCommit, err := reqCommit.Do(context.Background(), client)
		if err != nil {
			return fmt.Errorf("Error committing the transaction: %s", err)
		}
		defer resCommit.Body.Close()

		return nil
	}

	// 执行事务
	err = transaction()
	if err != nil {
		log.Fatalf("Error executing the transaction: %s", err)
	}

	fmt.Println("Transaction executed successfully")
}
```

在上述代码中，我们定义了一个transaction函数，用于执行事务操作。在事务中，我们可以执行一系列的操作，例如更新多个文档或执行复杂的业务逻辑。在示例中，我们使用了Elasticsearch的XPack Security API来模拟事务的开始和提交操作。

## 7. 数据安全性

> 如何保护Elasticsearch中的数据安全性？

### 解答：

保护Elasticsearch中的数据安全性是商业项目中的重要任务之一。以下是一些保护数据安全性的方法：

- 访问控制：使用Elasticsearch的安全特性，如访问控制列表（ACL）和角色基于访问控制（RBAC），限制对敏感数据的访问权限。例如，在一个医疗保健应用的商业项目中，可以设置只有授权的医生才能访问患者的病历数据。
- 数据加密：使用SSL/TLS加密通信，确保数据在传输过程中的安全性。例如，在一个金融应用的商业项目中，可以使用SSL/TLS加密用户的交易数据，以保护用户的隐私和安全。
- 数据备份和恢复：定期备份数据，并确保备份数据的安全存储。在商业项目中，例如一个在线存储平台，可以定期备份用户的文件数据，并采取措施确保备份数据的完整性和可靠性。
- 审计日志：记录和监控对Elasticsearch的访问和操作，以便及时发现和应对潜在的安全威胁。例如，在一个企业协作平台的商业项目中，可以记录用户的登录、文件访问和编辑操作，以便审计和追踪数据的使用情况。

### 举个例子：

以下代码示例，展示如何使用Go语言和Elasticsearch的API来实现访问控制和数据加密：

```go
package main

import (
	"context"
	"fmt"
	"log"

	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
)

func main() {
	// 创建Elasticsearch客户端
	cfg := elasticsearch.Config{
		Addresses: []string{"http://localhost:9200"},
		Username:  "admin",
		Password:  "password",
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		log.Fatalf("Error creating the client: %s", err)
	}

	// 设置索引的访问控制列表（ACL）
	reqACL := esapi.SecurityPutRoleMappingRequest{
		Name: "doctor_role_mapping",
		Body: map[string]interface{}{
			"roles": []string{"doctor_role"},
			"users": []string{"doctor_user"},
		},
	}

	// 发送设置访问控制列表的请求
	resACL, err := reqACL.Do(context.Background(), client)
	if err != nil {
		log.Fatalf("Error setting the ACL: %s", err)
	}
	defer resACL.Body.Close()

	// 检查响应状态
	if resACL.IsError() {
		log.Fatalf("Error setting the ACL: %s", resACL.Status())
	}

	// 打印设置访问控制列表成功的消息
	fmt.Println("ACL set successfully")

	// 设置索引的SSL/TLS加密
	reqTLS := esapi.IndicesPutSettingsRequest{
		Index: []string{"patient_data_index"},
		Body: map[string]interface{}{
			"settings": map[string]interface{}{
				"index": map[string]interface{}{
					"number_of_replicas": 1,
					"number_of_shards":   5,
					"refresh_interval":   "1s",
					"codec":              "best_compression",
				},
			},
		},
	}

	// 发送设置SSL/TLS加密的请求
	resTLS, err := reqTLS.Do(context.Background(), client)
	if err != nil {
		log.Fatalf("Error setting the TLS encryption: %s", err)
	}
	defer resTLS.Body.Close()
	// 检查响应状态
	if resTLS.IsError() {
		log.Fatalf("Error setting the TLS encryption: %s", resTLS.Status())
	}

	// 打印设置TLS加密成功的消息
	fmt.Println("TLS encryption set successfully")
}
```

在上述代码中，我们使用Elasticsearch的Security API来设置访问控制列表（ACL）和索引的SSL/TLS加密。在示例中，我们设置了一个名为`doctor_role_mapping`的角色映射，将医生用户与医生角色关联起来，并设置了一个名为`patient_data_index`的索引的SSL/TLS加密。

## 8.数据同步和复制

> 如何处理Elasticsearch中的数据同步和复制？

### 解答：

在商业项目中，例如一个多地区的电子商务平台，数据同步和复制是至关重要的。为了处理Elasticsearch中的数据同步和复制，可以采取以下方法：

- 使用Elasticsearch的副本机制：通过配置适当数量的副本，将数据复制到不同的节点上，以实现数据的冗余存储和高可用性。当主分片不可用时，副本可以接管服务，确保数据的持续访问和处理。
- 使用Elasticsearch的跨集群复制功能：通过设置跨集群复制，可以将数据复制到不同的集群中，实现跨地区的数据同步和复制。例如，在一个多地区的电子商务平台的商业项目中，可以将数据复制到不同的地理位置的集群中，确保数据在不同地区的节点上都有备份。这样可以提高数据的可用性和容灾能力，保证用户在不同地区的访问体验。

### 代码示例：

以下是一个简单的示例代码，展示了如何使用Elasticsearch的跨集群复制功能：

```go
package main

import (
	"context"
	"fmt"
	"log"

	"github.com/elastic/go-elasticsearch/v8"
	"github.com/elastic/go-elasticsearch/v8/esapi"
)

func main() {
	// 创建源集群的Elasticsearch客户端
	sourceCfg := elasticsearch.Config{
		Addresses: []string{"http://source-cluster:9200"},
	}
	sourceClient, err := elasticsearch.NewClient(sourceCfg)
	if err != nil {
		log.Fatalf("Error creating the source client: %s", err)
	}

	// 创建目标集群的Elasticsearch客户端
	targetCfg := elasticsearch.Config{
		Addresses: []string{"http://target-cluster:9200"},
	}
	targetClient, err := elasticsearch.NewClient(targetCfg)
	if err != nil {
		log.Fatalf("Error creating the target client: %s", err)
	}

	// 设置跨集群复制的请求体
	reqBody := `{
		"remote_cluster": {
			"remote_cluster_name": "source-cluster",
			"seed_hosts": ["source-cluster:9300"]
		},
		"leader_index_patterns": ["index1-*"],
		"follower_index_prefix": "replica-"
	}`

	// 发送跨集群复制的请求
	res, err := targetClient.CrossClusterReplication.FollowIndex(
		"follower-index",
		reqBody,
		targetClient.CrossClusterReplication.FollowIndex.WithContext(context.Background()),
	)
	if err != nil {
		log.Fatalf(""Error sending the follow index request: %s", err) 
    }
    
    // 解析跨集群复制的响应
defer res.Body.Close()
if res.IsError() {
	log.Fatalf("Follow index request failed: %s", res.Status())
}

// 处理跨集群复制的响应
fmt.Println("Follow index request successful")
```

通过上述代码示例，我们可以看到如何使用Elasticsearch的跨集群复制功能来实现数据的同步和复制。在商业项目中，这种方法可以用于多地区的电子商务平台，确保数据在不同地区的节点上都有备份，提高数据的可用性和容灾能力。

## 总结

相信你看完这些面试题后，对我开篇讲的这些话有了更好的理解：

**我们在回答面试题的时候，不能干巴巴的去背八股文，一定要结合应用场景，最好能结合过去做过的项目，去和面试官沟通。**

这些场景题虽然不要求我们手撕代码，但是解决思路和关键方法还是要烂熟于心的。

**这篇文章不仅给出了常见的面试题和答案，并且给出了这些知识点的应用场景、也给出了解决这些问题的思路，并且结合这些思路提供了关键代码。这些代码段都是可以直接CV到本地运行起来的，并且都写清楚了注释，欢迎大家动起手来操练起来，不要死记硬背八股文。**

最后，整理不易，原创更不易，你的点赞、留言、转发是对我最大的支持！

**全网搜索：`王中阳Go`，获得更多面试题资料。**

## 欢迎关注 ❤

我的微信：wangzhongyang1993

视频号：[王中阳Go](https://mp.weixin.qq.com/s/IUsfZGiOPtFIB1GBr10l7g)

公众号：[程序员升职加薪之旅](https://mp.weixin.qq.com/s/IUsfZGiOPtFIB1GBr10l7g)

![](https://files.mdnice.com/user/36414/55f4476f-82cd-4306-ac87-eee4928de2ed.jpeg)
